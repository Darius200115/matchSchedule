{"ast":null,"code":"import { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nexport class AuthService {\n  constructor(http, router, location) {\n    this.http = http;\n    this.router = router;\n    this.location = location;\n    this.baseUrl = 'https://localhost:7145/api/User/';\n    this.userPayload = this.decodedToken();\n  }\n  signUp(userObj) {\n    return this.http.post(`${this.baseUrl}register`, userObj);\n  }\n  signOut() {\n    localStorage.removeItem('token');\n    this.router.navigate(['/']);\n    window.location.reload();\n    this.isLoggedIn();\n  }\n  login(loginObj) {\n    return this.http.post(`${this.baseUrl}authenticate`, loginObj);\n  }\n  storeToken(token) {\n    localStorage.setItem('token', token);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  decodedToken() {\n    const jwtHelper = new JwtHelperService();\n    const token = this.getToken();\n    return jwtHelper.decodeToken(token);\n  }\n  getFullNameFromToken() {\n    if (this.userPayload) return this.userPayload.name;\n  }\n  getRoleFromToken() {\n    if (this.userPayload) return this.userPayload.role;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.Location));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["JwtHelperService","AuthService","constructor","http","router","location","baseUrl","userPayload","decodedToken","signUp","userObj","post","signOut","localStorage","removeItem","navigate","window","reload","isLoggedIn","login","loginObj","storeToken","token","setItem","getToken","getItem","jwtHelper","decodeToken","getFullNameFromToken","name","getRoleFromToken","role","i0","ɵɵinject","i1","HttpClient","i2","Router","i3","Location","factory","ɵfac","providedIn"],"sources":["C:\\Users\\svenp\\source\\repos\\Darius200115\\matchSchedule\\matchSchedule\\ClientApp\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { Location } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private baseUrl: string = 'https://localhost:7145/api/User/';\n  private userPayload: any;\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private location: Location\n  ) {\n    this.userPayload = this.decodedToken();\n  }\n\n  signUp(userObj: any) {\n    return this.http.post<any>(`${this.baseUrl}register`, userObj);\n  }\n\n  signOut() {\n    localStorage.removeItem('token');\n    this.router.navigate(['/']);\n    window.location.reload();\n    this.isLoggedIn();\n  }\n\n  login(loginObj: any) {\n    return this.http.post<any>(`${this.baseUrl}authenticate`, loginObj);\n  }\n\n  storeToken(token: string) {\n    localStorage.setItem('token', token);\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  isLoggedIn(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  decodedToken() {\n    const jwtHelper = new JwtHelperService();\n    const token = this.getToken()!;\n    return jwtHelper.decodeToken(token);\n  }\n\n  getFullNameFromToken() {\n    if (this.userPayload) return this.userPayload.name;\n  }\n\n  getRoleFromToken() {\n    if (this.userPayload) return this.userPayload.role;\n  }\n}\n"],"mappings":"AAGA,SAASA,gBAAgB,QAAQ,oBAAoB;;;;;AAMrD,OAAM,MAAOC,WAAW;EAGtBC,YACUC,IAAgB,EAChBC,MAAc,EACdC,QAAkB;IAFlB,KAAAF,IAAI,GAAJA,IAAI;IACJ,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,QAAQ,GAARA,QAAQ;IALV,KAAAC,OAAO,GAAW,kCAAkC;IAO1D,IAAI,CAACC,WAAW,GAAG,IAAI,CAACC,YAAY,EAAE;EACxC;EAEAC,MAAMA,CAACC,OAAY;IACjB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAM,GAAG,IAAI,CAACL,OAAO,UAAU,EAAEI,OAAO,CAAC;EAChE;EAEAE,OAAOA,CAAA;IACLC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAACV,MAAM,CAACW,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3BC,MAAM,CAACX,QAAQ,CAACY,MAAM,EAAE;IACxB,IAAI,CAACC,UAAU,EAAE;EACnB;EAEAC,KAAKA,CAACC,QAAa;IACjB,OAAO,IAAI,CAACjB,IAAI,CAACQ,IAAI,CAAM,GAAG,IAAI,CAACL,OAAO,cAAc,EAAEc,QAAQ,CAAC;EACrE;EAEAC,UAAUA,CAACC,KAAa;IACtBT,YAAY,CAACU,OAAO,CAAC,OAAO,EAAED,KAAK,CAAC;EACtC;EAEAE,QAAQA,CAAA;IACN,OAAOX,YAAY,CAACY,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAP,UAAUA,CAAA;IACR,OAAO,CAAC,CAACL,YAAY,CAACY,OAAO,CAAC,OAAO,CAAC;EACxC;EAEAjB,YAAYA,CAAA;IACV,MAAMkB,SAAS,GAAG,IAAI1B,gBAAgB,EAAE;IACxC,MAAMsB,KAAK,GAAG,IAAI,CAACE,QAAQ,EAAG;IAC9B,OAAOE,SAAS,CAACC,WAAW,CAACL,KAAK,CAAC;EACrC;EAEAM,oBAAoBA,CAAA;IAClB,IAAI,IAAI,CAACrB,WAAW,EAAE,OAAO,IAAI,CAACA,WAAW,CAACsB,IAAI;EACpD;EAEAC,gBAAgBA,CAAA;IACd,IAAI,IAAI,CAACvB,WAAW,EAAE,OAAO,IAAI,CAACA,WAAW,CAACwB,IAAI;EACpD;;AAlDW9B,WAAW,C;mBAAXA,WAAW,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,QAAA;AAAA;AAAXtC,WAAW,C;SAAXA,WAAW;EAAAuC,OAAA,EAAXvC,WAAW,CAAAwC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}